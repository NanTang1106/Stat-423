sse_all <- c(sse_1, sse_2, sse_3, sse_4)
sse_all / df_all
sse_all
df_all
anova(fit1, fit2)
## b
fit1 <- lm(formula=BMI18~WT9 + ST9, data=bgs_girls)
fit2 <- lm(formula=BMI18 ~., data=bgs_girls)
## c
n <- nrow(bgs_girls)
sse_full <- sum(residuals(fit2)^2)
sse_red <- sum(residuals(fit1)^2)
df_full <- n - 6
df_red <- n - 3
f_value <- ((sse_red - sse_full) / (df_red - df_full)) / (sse_full / df_full)
f_value
anova(fit1, fit2)
anova(fit_height, fit_height2)
anova(fit_height2, fit_height3)
summary(fit_height2)
anova(fit_height, fit_height2)
anova(fit_height, fit_height3)
anova(fit_height, fit_height4)
anova(fit_height3, fit_height4)
anova(fit_height2, fit_height3)
anova(fit_height3, fit_height4)
anova(fit_height2, fit_height3)
## b
fit1 <- lm(formula=BMI18~WT9 + ST9, data=bgs_girls)
library(alr4)
## question 1
## a
bgs_girls <- BGSgirls %>% select(WT2, HT2, WT9, HT9, ST9, BMI18)
pairs(bgs_girls, cex=0.6, pch=16)
print(cor(bgs_girls))
## question 1
## a
bgs_girls <- BGSgirls %>% select(WT2, HT2, WT9, HT9, ST9, BMI18)
library(dplyr)
## question 1
## a
bgs_girls <- BGSgirls %>% select(WT2, HT2, WT9, HT9, ST9, BMI18)
pairs(bgs_girls, cex=0.6, pch=16)
print(cor(bgs_girls))
## b
fit1 <- lm(formula=BMI18~WT9 + ST9, data=bgs_girls)
fit2 <- lm(formula=BMI18 ~., data=bgs_girls)
## c
n <- nrow(bgs_girls)
sse_full <- sum(residuals(fit2)^2)
sse_red <- sum(residuals(fit1)^2)
df_full <- n - 6
df_red <- n - 3
f_value <- ((sse_red - sse_full) / (df_red - df_full)) / (sse_full / df_full)
anova(fit1, fit2)
sqrt(11.78)
sqrt(11.86)
sqrt(11.57)
sqrt(11.64)
sqrt(11.51)
?I
ln(49)
log(49) + log(9)
data(yogurt)
round(3.44444, 3)
options('digits')
yr <- 45
K <- 1
p0 <- 0.058
rt <- 3
decimal_num <- 10
keep_decimal <- function(origin_num, decimal_place) {
temp_num <- floor(origin_num * 10^(decimal_place))
print(temp_num)
return(temp_num / 10^(decimal_place))
}
interest_cal <- function(curr_p, decimal_place) {
new_p <- curr_p + rt * curr_p * (1 - curr_p)
return(keep_decimal(new_p, decimal_place))
}
interest_cal(p0, decimal_num)
interest_cal(0.221908, decimal_num)
options(digits=10)
interest_cal(0.221908, decimal_num)
interest_cal(0.7399025186, decimal_num)
options(digits=13)
interest_cal(0.221908, decimal_num)
interest_cal(0.7399025186, decimal_num)
p_set <- numeric(yr)
p_set[1] <- p0
p_set
new_p <- inters_cal(p_set[i], decimal_num)
new_p <- interst_cal(p_set[i], decimal_num)
new_p <- interest_cal(p_set[i], decimal_num)
for (i in 1:yr) {
new_p <- interest_cal(p_set[i], decimal_num)
}
p_set[i]
p_set[1] <- p0
i
p_set[1]
p_set[i+1] <- new_p
for (i in 1:yr) {
new_p <- interest_cal(p_set[i], decimal_num)
p_set[i+1] <- new_p
}
p_set
p_set * 1000000
for (i in 1:yr) {
new_p_9 <- interest_cal(p_set_9[i], 9)
p_set_9[i+1] <- new_p_9
new_p_10 <- interest_cal(p_set_10[i], 10)
p_set_10[i+1] <- new_p_10
}
p_set_9 <- numeric(yr)
p_set_9[1] <- p0
p_set_10 <- numeric(yr)
p_set_10[1] <- p0
# keep decimal to given level
keep_decimal <- function(origin_num, decimal_place) {
temp_num <- floor(origin_num * 10^(decimal_place))
print(temp_num)
return(temp_num / 10^(decimal_place))
}
# calculate balance at t + delta t
interest_cal <- function(curr_p, decimal_place) {
new_p <- curr_p + rt * curr_p * (1 - curr_p)
return(keep_decimal(new_p, decimal_place))
}
for (i in 1:yr) {
new_p_9 <- interest_cal(p_set_9[i], 9)
p_set_9[i+1] <- new_p_9
new_p_10 <- interest_cal(p_set_10[i], 10)
p_set_10[i+1] <- new_p_10
}
temp_num <- floor(origin_num * 10^(decimal_place))
# keep decimal to given level
keep_decimal <- function(origin_num, decimal_place) {
temp_num <- floor(origin_num * 10^(decimal_place))
return(temp_num / 10^(decimal_place))
}
# calculate balance at t + delta t
interest_cal <- function(curr_p, decimal_place) {
new_p <- curr_p + rt * curr_p * (1 - curr_p)
return(keep_decimal(new_p, decimal_place))
}
for (i in 1:yr) {
new_p_9 <- interest_cal(p_set_9[i], 9)
p_set_9[i+1] <- new_p_9
new_p_10 <- interest_cal(p_set_10[i], 10)
p_set_10[i+1] <- new_p_10
}
data.frame(0:45, p_set_9, p_set_10)
result <- data.frame(0:45, p_set_9, p_set_10)
colnames(result, c('Year', 'Balance (9 decimals)', 'Balance (10 decimals)'))
result <- data.frame(0:45, p_set_9, p_set_10)
colnames(result, c('Year', 'Balance (9 decimals)', 'Balance (10 decimals)'))
result
names(result, c('Year', 'Balance (9 decimals)', 'Balance (10 decimals)'))
names(result, c('Year', 'Balance_9_decimal', 'Balance_10_decimal'))
names(result) <- c('Year', 'Balance_9_decimal', 'Balance_10_decimal')
result
names(result) <- c('Year', 'Balance 9_decimal', 'Balance_10_decimal')
names(result) <- c('Year', 'Balance (9 decimals)', 'Balance (10 decimals)')
result
result <- data.frame(0:45, p_set_9 * 1000000, p_set_10 * 1000000)
names(result) <- c('Year', 'Balance (9 decimals)', 'Balance (10 decimals)')
result
View(result)
row.names(result) <- NULL
result
print(result, row.names = F)
print(result, row.names = F)
y <- rnorm(20, 0, 1)
x1 <- runif(20, 1, 5)
x2 <- c(rep(c(0, 1), 10))
x2
x2 <- c(rep(c(1,0, 1, 1), 5))
y <- rnorm(20, 0, 1)
x1 <- runif(20, 1, 5)
x2 <- c(rep(c(0, 1), 10))
x3 <- c(rep(c(1,0, 1, 1), 5))
fit1 <- lm(y~x1+x2+x3)
summary(fit1)
fit1 <- lm(y~x1+x2+x3+x2:x3)
summary(fit1)
plot(fit1)
plot(y, x1)
abline(fit1)
fit1 <- lm(y~x2+x3+x2:x3)
fit1
fit1 <- lm(y~x2+x3+x2*x3)
ffit1
fit1
rm(list=ls(all.names=T))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(zipcode)
data("zipcode")
dt_location <- '/Users/nantang/Google Drive/STAT 423/Project-Proposal'
setwd(dt_location)
# prepare dataset
house_dt <- read.csv('kc_house_data.csv')
# remove variable 'id', 'date', 'sqft_living', 'sqft_lot'
house_dt <- house_dt[, -c(1, 2, 6, 7)]
# check missing values
NA_index <- numeric(ncol(house_dt))
for (i in 1:ncol(house_dt)) {
NA_index[i] <- length(which(is.na(house_dt[,i])))
}
NA_index ## no missing value
### function remove outliers
outliers_remove <- function(dt, variable_dt) {
outliers_value <- boxplot.stats(variable_dt)$out
new_dt <- dt[-which(variable_dt %in% outliers_value),]
return(new_dt)
}
# remove bedroom outliers
house_dt <- outliers_remove(house_dt, house_dt$bedrooms)
# remove sqft_living15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_living15)
# remove sqft_lot15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_lot15)
# remove sqft_above outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_above)
# remove sqft_basement outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_basement)
# zipcode clustering
zip_city <- zipcode %>%
select(zipcode=zip, city)
house_dt$zipcode <- as.character(house_dt$zipcode)
house_dt_new <- left_join(house_dt, zip_city, by='zipcode')
house_dt_new$city <- as.factor(house_dt_new$city)
# data transform and check co-linearity
house_dt_new <- house_dt %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -sqft_above, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
head(house_dt_new)
# data transform and check co-linearity
house_dt_new <- house_dt_new %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -sqft_above, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
# prepare dataset
house_dt <- read.csv('kc_house_data.csv')
# remove variable 'id', 'date', 'sqft_living', 'sqft_lot'
house_dt <- house_dt[, -c(1, 2, 6, 7)]
# check missing values
NA_index <- numeric(ncol(house_dt))
for (i in 1:ncol(house_dt)) {
NA_index[i] <- length(which(is.na(house_dt[,i])))
}
NA_index ## no missing value
### function remove outliers
outliers_remove <- function(dt, variable_dt) {
outliers_value <- boxplot.stats(variable_dt)$out
new_dt <- dt[-which(variable_dt %in% outliers_value),]
return(new_dt)
}
# remove bedroom outliers
house_dt <- outliers_remove(house_dt, house_dt$bedrooms)
# remove sqft_living15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_living15)
# remove sqft_lot15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_lot15)
# remove sqft_above outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_above)
# remove sqft_basement outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_basement)
house_dt$zipcode <- as.character(house_dt$zipcode)
house_dt <- left_join(house_dt, zip_city, by='zipcode')
house_dt$city <- as.factor(house_dt$city)
# data transform and check co-linearity
house_dt_new <- house_dt_new %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -sqft_above, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
# data transform and check co-linearity
house_dt_new <- house_dt_new %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
# prepare dataset
house_dt <- read.csv('kc_house_data.csv')
# remove variable 'id', 'date', 'sqft_living', 'sqft_lot'
house_dt <- house_dt[, -c(1, 2, 6, 7)]
colnames(house_dt)
# check missing values
NA_index <- numeric(ncol(house_dt))
for (i in 1:ncol(house_dt)) {
NA_index[i] <- length(which(is.na(house_dt[,i])))
}
NA_index ## no missing value
### function remove outliers
outliers_remove <- function(dt, variable_dt) {
outliers_value <- boxplot.stats(variable_dt)$out
new_dt <- dt[-which(variable_dt %in% outliers_value),]
return(new_dt)
}
# remove bedroom outliers
house_dt <- outliers_remove(house_dt, house_dt$bedrooms)
# remove sqft_living15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_living15)
# remove sqft_lot15 outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_lot15)
# remove sqft_above outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_above)
# remove sqft_basement outliers
house_dt <- outliers_remove(house_dt, house_dt$sqft_basement)
ncol(house_dt)
colnames(house_dt)
house_dt$zipcode <- as.character(house_dt$zipcode)
house_dt <- left_join(house_dt, zip_city, by='zipcode')
house_dt$city <- as.factor(house_dt$city)
colnames(house_dt)
# data transform and check co-linearity
house_dt_new <- house_dt_new %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -sqft_above, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
# data transform and check co-linearity
house_dt_new <- house_dt %>%
mutate(room_avg_sqft = sqft_above / (bedrooms + bathrooms + 1) ) %>%
mutate(house_age = (2015 - yr_built)) %>%
mutate(renovated = ifelse(yr_renovated==0, 0, 1)) %>%
select(-grade, -bedrooms, -bathrooms, -sqft_above, -zipcode, -sqft_living15, -yr_built, -yr_renovated)
head(house_dt_new)
# set factor
house_dt_new$waterfront <- as.factor(house_dt_new$waterfront)
house_dt_new$renovated <- as.factor(house_dt_new$renovated)
write.csv(house_dt_new, 'house_dt_new.csv')
#  visualizing correlation matrix
house_corr <- cor(house_dt_new)
house_corr_df <- melt(house_corr)
library(tidyverse)
library(MASS)
colnames(house_dt_new)
#  visualizing correlation matrix
house_corr <- cor(house_dt_new[,-c(waterfront, city, renovated)])
#  visualizing correlation matrix
house_corr <- cor(house_dt_new[,-c(3, 10, 13)])
house_corr_df <- melt(house_corr)
house_corr_df <- house_corr_df %>%
mutate(value = replace(value, value==1, NA))
col_fill <- c('red', 'blue')
library(reshape2)
#  visualizing correlation matrix
house_corr <- cor(house_dt_new[,-c(3, 10, 13)])
house_corr_df <- melt(house_corr)
house_corr_df <- house_corr_df %>%
mutate(value = replace(value, value==1, NA))
col_fill <- c('red', 'blue')
p2 <- ggplot(data=house_corr_df, mapping=aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color='white', size=0.75) +
scale_fill_gradient2(midpoint=0, low='#c7e9b4', mid="#41b6c4",
high="#225ea8", na.value='gray95') +
ggtitle('Matrix of Correlation Coefficients') +
theme (
axis.text.x = element_text(angle=45, vjust=0.6),
axis.text.y = element_text(angle=0, hjust=0.6),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text( hjust=0.5, vjust=0),
legend.text = element_text(face='bold'),
legend.key.width = grid::unit(0.3,'cm'),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid.major = element_blank()
)
p2
ggsave("cm_post.pdf",
width=width,
height=width/1.2)
width=7
ggsave("cm_post.pdf",
width=width,
height=width/1.2)
colnames(house_corr_df)
p2 <- ggplot(data=house_corr_df, mapping=aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color='white', size=0.75) +
scale_fill_gradient2(midpoint=0, low='#c7e9b4', mid="#41b6c4",
high="#225ea8", na.value='gray95') +
geom_text(value) +
ggtitle('Matrix of Correlation Coefficients') +
theme (
axis.text.x = element_text(angle=45, vjust=0.6),
axis.text.y = element_text(angle=0, hjust=0.6),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text( hjust=0.5, vjust=0),
legend.text = element_text(face='bold'),
legend.key.width = grid::unit(0.3,'cm'),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid.major = element_blank()
)
p2 <- ggplot(data=house_corr_df, mapping=aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color='white', size=0.75) +
scale_fill_gradient2(midpoint=0, low='#c7e9b4', mid="#41b6c4",
high="#225ea8", na.value='gray95') +
geom_text(aes(label=value)) +
ggtitle('Matrix of Correlation Coefficients') +
theme (
axis.text.x = element_text(angle=45, vjust=0.6),
axis.text.y = element_text(angle=0, hjust=0.6),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text( hjust=0.5, vjust=0),
legend.text = element_text(face='bold'),
legend.key.width = grid::unit(0.3,'cm'),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid.major = element_blank()
)
p2
p2 <- ggplot(data=house_corr_df, mapping=aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color='white', size=0.75) +
scale_fill_gradient2(midpoint=0, low='#c7e9b4', mid="#41b6c4",
high="#225ea8", na.value='gray95') +
geom_text(aes(label=round(value, 2))) +
ggtitle('Matrix of Correlation Coefficients') +
theme (
axis.text.x = element_text(angle=45, vjust=0.6),
axis.text.y = element_text(angle=0, hjust=0.6),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text( hjust=0.5, vjust=0),
legend.text = element_text(face='bold'),
legend.key.width = grid::unit(0.3,'cm'),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid.major = element_blank()
)
p2
p2 <- ggplot(data=house_corr_df, mapping=aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color='white', size=0.75) +
scale_fill_gradient2(midpoint=0, low='#c7e9b4', mid="#41b6c4",
high="#225ea8", na.value='gray95') +
geom_text(aes(label=round(value, 2)), color='white') +
ggtitle('Matrix of Correlation Coefficients') +
theme (
axis.text.x = element_text(angle=45, vjust=0.6),
axis.text.y = element_text(angle=0, hjust=0.6),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.title = element_text( hjust=0.5, vjust=0),
legend.text = element_text(face='bold'),
legend.key.width = grid::unit(0.3,'cm'),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid.major = element_blank()
)
p2
ggsave("cm_post.pdf",
width=width,
height=width/1.2)
# backward step, BIC
lm_fit1 <- lm(data=house_dt_new, formula = price ~.)
step(object=lm_fit1, direction='backward', k=log(nrow(house_dt_new)))
summary(lm_fit1)
house_dt_new <- read_csv('house_dt_new.csv')
house_dt_new <- read_csv('house_dt_new.csv')
house_dt_new <- read.csv('house_dt_new.csv')
colnames(house_dt_new)
house_dt_new[,-1]
house_dt_new <- house_dt_new[,-1]
colnames(house_dt_new)
# box-cox for linearity
par(mfrow=c(1,1))
lm_fit1 <- lm(data=house_dt_new, formula = price ~.)
bc <- boxcox(lm_fit1, plotit = F)
lambda <- bc$x[which.max(bc$y)]
lambda <- -0.1
# backward step, BIC
lm_fit1 <- lm(data=house_dt_new, formula = price ~.)
step(object=lm_fit1, direction='backward', k=log(nrow(house_dt_new)))
boxcox(lm_fit1, plotit = T)
lambda <- 0
# backward step, BIC
lm_fit1 <- lm(data=house_dt_new, formula = price ~.)
step(object=lm_fit1, direction='backward', k=log(nrow(house_dt_new)))
lm_fit2 <- lm(data=house_dt_new, formula=log(price) ~.)
summary(lm_fit2)
house_dt_new$waterfront <- as.factor(house_dt_new$waterfront)
house_dt_new$renovated <- as.factor(house_dt_new$renovated)
house_dt_new$city <- as.factor(house_dt_new$city)
lm_fit2 <- lm(data=house_dt_new, formula=log(price) ~.)
summary(lm_fit2)
plot(lm_fit2$residuals, which=1)
plot(lm_fit2, which=1)
plot(lm_fit2, which=1, pch=16, cex=0.75, col=rgb(0,0,0,0.6))
plot(lm_fit2, which=1, pch=16, cex=0.75, col=rgb(0,0,0,0.3))
plot(lm_fit2, which=1, pch=1, cex=0.75, col=rgb(0,0,0,0.3))
plot(lm_fit2, which=1, pch=16, cex=0.75, col=rgb(0,0,0,0.3))
plot(lm_fit2, which=1, pch=16, cex=0.75, col=rgb(105,105,105,0.3))
plot(lm_fit2, which=1, pch=16, cex=0.75, col=rgb(0.2,0.2,0.2,0.3))
qqplot(lm_fit2$residuals)
qqnorm(lm_fit2$residuals)
library(boot)
library(leaps)
plot(lm_fit2, which=2)
plot(lm_fit2, which=3)
plot(lm_fit2, which=4)
plot(lm_fit2, which=5)
plot(lm_fit2, which=4)

library(glmnet)
dir <- '/Users/nantang/Google Drive/STAT 423/HW/HW4'
car = readRDS("car.RDS")
setwd(dir)
car = readRDS("car.RDS")
dir <- '/Users/nantang/Google Drive/STAT 423/HW/HW4'
setwd(dir)
car = readRDS("car.RDS")
## 1
## a
car_dt <- readRDS('car.rds')
setwd("~/Desktop/WorshipTheToad/2020WI/Stat 504/")
car = readRDS("car.RDS")
dir <- '/Users/nantang/Google Drive/STAT 423/HW/HW4'
setwd(dir)
car = readRDS("car.RDS")
car$purchase =  as.factor(car$purchase)
library(glmnet)
setwd("~/Desktop/WorshipTheToad/2020WI/Stat 504/")
fit.raw = glm(purchase ~ income + age, data = car, family=binomial)
summary(fit.raw)
new = data.frame(income=50, age=3)
predict(fit.raw, new, type='response')
par(mfrow=c(1,2))
plot(fit.raw, which=c(4,5))
fit.all = glm(purchase ~ income + age + income:age, data = car, family=binomial)
anova(fit.raw, fit.all, test='Chisq')
no.yes <- c("No", "Yes")
smoking <- gl(2,1,7, no.yes)
obesity <- gl(2,2,7, no.yes)
snoring <- gl(2,4,7, no.yes)
n.total <- c(60, 17, 8, 187, 85, 51, 23)
n.hyper <- c(5, 2, 1, 35, 13, 15, 8)
no.yes <- c("No", "Yes")
smoking <- gl(2,1,7, no.yes)
obesity <- gl(2,2,7, no.yes)
snoring <- gl(2,4,7, no.yes)
n.total <- c(60, 17, 8, 187, 85, 51, 23)
n.hyper <- c(5, 2, 1, 35, 13, 15, 8)
hyperention = data.frame("Yes"=n.hyper, "No" = n.total - n.hyper)
hyperention
fit.full = glm(n.hyper / n.total ~ smoking + obesity + snoring, family=binomial, weight = n.total)
fit.full
pchisq(fit.full$null.deviance - fit.full$deviance, df= 3, lower.tail = F)
##b
fit_hyper1 <- glm(n.hyper/n.total~smoking+obesity+snoring, weight=n.total, family=binomial)
hyper_df <- fit_hyper1$df.residual
pchisq(fit_hyper1$null.deviance - fit_hyper1$deviance, hyper_df, lower.tail = F)
hyper_dt <- hyper_dt %>%
mutate(pred_prop = round(predict(fit_hyper2, hyper_dt[,1:3], type='response'))) %>%
mutate(pred_count = pred_prop * n.total) %>%
select(smoking, obesity, snoring, non_hyper, hyper, pred_count, obs_prop, pred_prop)
##e
hyper_dt <- data.frame(smoking, obesity, snoring, n.hyper, (n.total-n.hyper), (n.hyper/n.total))
colnames(hyper_dt) <- c('smoking', 'obesity', 'snoring', 'hyper', 'non_hyper', 'obs_prop')
hyper_dt <- hyper_dt %>%
mutate(pred_prop = round(predict(fit_hyper2, hyper_dt[,1:3], type='response'))) %>%
mutate(pred_count = pred_prop * n.total) %>%
select(smoking, obesity, snoring, non_hyper, hyper, pred_count, obs_prop, pred_prop)
library(tidyverse)
##e
hyper_dt <- data.frame(smoking, obesity, snoring, n.hyper, (n.total-n.hyper), (n.hyper/n.total))
colnames(hyper_dt) <- c('smoking', 'obesity', 'snoring', 'hyper', 'non_hyper', 'obs_prop')
hyper_dt <- hyper_dt %>%
mutate(pred_prop = round(predict(fit_hyper2, hyper_dt[,1:3], type='response'))) %>%
mutate(pred_count = pred_prop * n.total) %>%
select(smoking, obesity, snoring, non_hyper, hyper, pred_count, obs_prop, pred_prop)
##d
fit_hyper2 <- glm(n.hyper/n.total~obesity+snoring, weight=n.total, family=binomial)
hyper_dt <- hyper_dt %>%
mutate(pred_prop = round(predict(fit_hyper2, hyper_dt[,1:3], type='response'))) %>%
mutate(pred_count = pred_prop * n.total) %>%
select(smoking, obesity, snoring, non_hyper, hyper, pred_count, obs_prop, pred_prop)
fit_hyper2
hyper_dt
hyper_dt <- hyper_dt %>%
mutate(pred_prop = predict(fit_hyper2, hyper_dt[,1:3], type='response')) %>%
mutate(pred_count = round(pred_prop * n.total)) %>%
select(smoking, obesity, snoring, non_hyper, hyper, pred_count, obs_prop, pred_prop)
hyper_dt
data.frame('fitted proportion'=fit.two$fitted.values, 'true proportion'=n.hyper / n.total, 'fitted count '=fit.two$fitted.values*n.total, 'fitted count '= round(fit.two$fitted.values*n.total), 'true proportion'=n.hyper)
fit.two = glm(n.hyper / n.total ~ obesity + snoring, family=binomial, weight = n.total)
data.frame('fitted proportion'=fit.two$fitted.values, 'true proportion'=n.hyper / n.total, 'fitted count '=fit.two$fitted.values*n.total, 'fitted count '= round(fit.two$fitted.values*n.total), 'true proportion'=n.hyper)
##3
##a
data(ozone, package='gss')
ozone_dt <- ozone
ozone_dt$logupo3 <- log(ozone_dt$upo3)
ozone_dt <- select(ozone_dt, -upo3)
ozone_dt <- ozone_dt[-92,]
ff <- wrapFormula(logupo3~., data=ozone_dt, wrapString = 'poly(*, degree=3)')
ff <- update(ff, logupo3~.^3)
library(glmnet)
library(sfsmisc)
ff <- wrapFormula(logupo3~., data=ozone_dt, wrapString = 'poly(*, degree=3)')
ff <- update(ff, logupo3~.^3)
mm <- model.matrix(ff, data=ozone_dt)
data(ozone, package='gss')
d.ozone.e = ozone
d.ozone.e$logupo3 = log(d.ozone.e$upo3)
d.ozone.e = d.ozone.e[-92,]
require(sfsmisc)
ff <- wrapFormula(logupo3~., data=d.ozone.e, wrapString="poly(*,degree=3)")
ff <- update(ff, logupo3 ~ .^3)
mm <- model.matrix(ff, data=d.ozone.e)
require(glmnet)
ridge <- glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha=0)
ridge <- glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha=0)
lasso <- glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha=1)
lasso <- glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha=1)
elnet <- glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha=.5)
## For plotting the traces:
par(mfrow=c(1,3))
plot(ridge, xvar="lambda", main="Ridge")
plot(lasso, xvar="lambda", main="Lasso")
plot(ridge, xvar="lambda", main="Ridge")
plot(lasso, xvar="lambda", main="Lasso")
plot(elnet, xvar="lambda", main='Elastic Net')
par(mfrow=c(1,1))
set.seed(1)
cv.eln = cv.glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha = 0.5, nfolds=10)
cv.eln = cv.glmnet(mm, y=scale(d.ozone.e$logupo3, scale=F), alpha = 0.5, nfolds=10)
plot(cv.eln)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
cv.eln$lambda.1se
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
cv.eln$lambda.1se
cv.eln$lambda.1se
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
cv.eln$lambda.1se
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10)
cv.eln$lambda.1se
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10)
cv.eln$lambda.1se
plot(cv.eln)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
plot(cv.eln)
##b
set.seed(1)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
plot(cv.eln)
rm(list = ls(all. names = TRUE))
rm(list = ls(all.names = TRUE))
##b
set.seed(1)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
##3
##a
data(ozone, package='gss')
ozone_dt <- ozone
ozone_dt$logupo3 <- log(ozone_dt$upo3)
ozone_dt <- select(ozone_dt, -upo3)
ozone_dt <- ozone_dt[-92,]
ff <- wrapFormula(logupo3~., data=ozone_dt, wrapString = 'poly(*, degree=3)')
ff <- update(ff, logupo3~.^3)
mm <- model.matrix(ff, data=ozone_dt)
fit_ridge <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0, intercept=F)
fit_lasso <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=1, intercept=F)
fit_elnet <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, intercept=F)
##b
set.seed(1)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
plot(cv.eln)
cv.eln$lambda.1se
load("CustomerWinBack.rda")
cwb$gender = as.factor(cwb$gender)
fit.full = lm(duration~., data = cwb)
par(mfrow=c(2,2))
plot(fit.full, which=c(1,2,4,5))
par(mfrow=c(1,1))
step(fit.full, dir="both", k=2)
##b
step(object=fitlm_cwb, direction='both')
cwb$gender <- as.factor(cwb$gender)
fitlm_cwb <- lm(data=cwb, formula=duration~.)
##b
step(object=fitlm_cwb, direction='both')
## Lasso does not work with factor variables
xx  <- model.matrix(duration~0+., cwb)[,-4]
yy  <- cwb$duration
set.seed(1)
ridge.cv.eln <- cv.glmnet(xx, yy, nfolds = 5, alpha=0)
plot(ridge.cv.eln)
ridge.cv.eln
ridge.opt_lam = ridge.cv.eln$lambda.1se
glmnet(xx, yy, alpha=0, lambda=opt_lam)
glmnet(xx, yy, alpha=0, lambda=ridge.opt_lam)
summary(glmnet(xx, yy, alpha=0, lambda=ridge.opt_lam))
coef(glmnet(xx, yy, alpha=0, lambda=ridge.opt_lam))
##3
##a
set.seed(1)
data(ozone, package='gss')
ozone_dt <- ozone
ozone_dt$logupo3 <- log(ozone_dt$upo3)
ozone_dt <- select(ozone_dt, -upo3)
ozone_dt <- ozone_dt[-92,]
ff <- wrapFormula(logupo3~., data=ozone_dt, wrapString = 'poly(*, degree=3)')
ff <- update(ff, logupo3~.^3)
mm <- model.matrix(ff, data=ozone_dt)
fit_ridge <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0, intercept=F)
fit_lasso <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=1, intercept=F)
fit_elnet <- glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, intercept=F)
plot(fit_ridge, xvar='lambda', main='Ridge Regression')
plot(fit_lasso, xvar='lambda', main='Lasso Regression')
plot(fit_elnet, xvar='lambda',main='Elastic Net Regression')
##b
set.seed(1)
cv.eln <- cv.glmnet(mm, y=scale(ozone_dt$logupo3, scale=F), alpha=0.5, nfolds=10, intercept=F)
plot(cv.eln)
cv.eln$lambda.1se
set.seed(1)
cv_ridge <- cv.glmnet(xx, yy, alpha=0)
##d
xx <- model.matrix(duration~0+., cwb)[,-4]
yy <- cwb$duration
set.seed(1)
cv_ridge <- cv.glmnet(xx, yy, alpha=0)
opt_lambda1 <- cv_ridge$lambda.1se
fitrg_cwb <- glmnet(xx, yy, alpha=0, lambda = opt_lambda1)
coef(fitrg_cwb)
##e
set.seed(1)
opt_lambda1
ridge.cv.eln
ridge.cv.eln$lambda.1se
cv_ridge <- cv.glmnet(xx, yy, nfolds=5, alpha=0)
opt_lambda1 <- cv_ridge$lambda.1se
fitrg_cwb <- glmnet(xx, yy, alpha=0, lambda = opt_lambda1)
coef(fitrg_cwb)
opt_lambda1
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
set.seed(1)
lasso.cv.eln <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
plot(lasso.cv.eln)
lasso.cv.eln
lasso.opt_lam = lasso.cv.eln$lambda.1se
coef(glmnet(xx, yy, alpha=0, lambda=opt_lam))
coef(glmnet(xx, yy, alpha=0, lambda=lasso.opt_lam))
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
lasso.opt_lam
opt_lambda2
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
coef(glmnet(xx, yy, alpha=1, lambda=lasso.opt_lam))
coef(fitlas_cwb)
lasso.opt_lam
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
## cross validation preparation
pre.ols   <- c()
pre.aic   <- c()
pre.bic   <- c()
pre.rr <- c()
pre.las <- c()
folds      <- 5
sb         <- round(seq(0,nrow(cwb),length=(folds+1)))
for (i in 1:folds){
## define training and test datasets
test    <- (sb[((folds+1)-i)]+1):(sb[((folds+2)-i)])
train   <- (1:nrow(cwb))[-test]
## fit models
fit.ols <- lm(duration ~ ., data=cwb[train,])
fit.aic <- lm(duration ~ offer + lapse + price + gender, data=cwb[train,])
fit.bic <- lm(duration ~ offer + lapse + price + gender, data=cwb[train,])
xx      <- model.matrix(duration~0+., cwb[train,])[,-4]
yy      <- cwb$duration[train]
fit.rr  <- glmnet(xx,yy, lambda = ridge.opt_lam, alpha = 0)
fit.las <- glmnet(xx,yy, lambda = lasso.opt_lam, alpha = 1)
pre.ols[test] <- predict(fit.ols, newdata=cwb[test,])
pre.aic[test] <- predict(fit.aic, newdata=cwb[test,])
pre.bic[test] <- predict(fit.bic, newdata=cwb[test,])
pre.rr[test]  <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.rr))
pre.las[test] <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.las))
}
mean((cwb$duration-pre.ols)^2)
mean((cwb$duration-pre.aic)^2)
mean((cwb$duration-pre.bic)^2)
mean((cwb$duration-pre.rr)^2)
mean((cwb$duration-pre.las)^2)
##f
pre.ols <- c()
pre.aic <- c()
pre.bic <- c()
pre.rr <- c()
pre.las <- c()
folds <- 5
sb <- round(seq(0,nrow(cwb),length=(folds+1)))
for (i in 1:folds){
## define training and test datasets
test <- (sb[((folds+1)-i)]+1):(sb[((folds+2)-i)])
train <- (1:nrow(cwb))[-test]
## fit models
fit.ols <- lm(duration ~ ., data=cwb[train,])
fit.aic <- lm(duration ~ offer + lapse + gender + price, data=cwb[train,])
fit.bic <- lm(duration ~ offer + lapse + gender + price, data=cwb[train,])
xx <- model.matrix(duration~0+., cwb[train,])[,-4]
yy <- cwb$duration[train]
fit.rr <- glmnet(xx,yy, lambda = opt_lambda1, alpha = 0)
fit.las <- glmnet(xx,yy, lambda = opt_lambda2, alpha = 1)
## create predictions
pre.ols[test] <- predict(fit.ols, newdata=cwb[test,])
pre.aic[test] <- predict(fit.aic, newdata=cwb[test,])
pre.bic[test] <- predict(fit.bic, newdata=cwb[test,])
pre.rr[test] <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.rr))
pre.las[test] <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.las))
}
## Finally, compute the mean squared prediction error:
mean((cwb$duration-pre.ols)^2)
mean((cwb$duration-pre.aic)^2)
mean((cwb$duration-pre.bic)^2)
mean((cwb$duration-pre.rr)^2)
mean((cwb$duration-pre.las)^2)
set.seed(1)
lasso.cv.eln <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
plot(lasso.cv.eln)
lasso.cv.eln
lasso.opt_lam = lasso.cv.eln$lambda.1se
coef(glmnet(xx, yy, alpha=1, lambda=lasso.opt_lam))
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
opt_lambda2
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
opt_lambda1
opt_lambda2
##e
set.seed(1)
rm(list = ls(all.names = TRUE))
##4
##a
load('CustomerWinBack.rda')
glimpse(cwb)
cwb$gender <- as.factor(cwb$gender)
fitlm_cwb <- lm(data=cwb, formula=duration~.)
summary(fitlm_cwb)
##d
xx <- model.matrix(duration~0+., cwb)[,-4]
yy <- cwb$duration
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
set.seed(1)
cv_ridge <- cv.glmnet(xx, yy, nfolds=5, alpha=0)
opt_lambda1 <- cv_ridge$lambda.1se
fitrg_cwb <- glmnet(xx, yy, alpha=0, lambda = opt_lambda1)
coef(fitrg_cwb)
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
opt_lambda2
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
##f
pre.ols <- c()
pre.aic <- c()
pre.bic <- c()
pre.rr <- c()
pre.las <- c()
folds <- 5
sb <- round(seq(0,nrow(cwb),length=(folds+1)))
for (i in 1:folds){
## define training and test datasets
test <- (sb[((folds+1)-i)]+1):(sb[((folds+2)-i)])
train <- (1:nrow(cwb))[-test]
## fit models
fit.ols <- lm(duration ~ ., data=cwb[train,])
fit.aic <- lm(duration ~ offer + lapse + gender + price, data=cwb[train,])
fit.bic <- lm(duration ~ offer + lapse + gender + price, data=cwb[train,])
xx <- model.matrix(duration~0+., cwb[train,])[,-4]
yy <- cwb$duration[train]
fit.rr <- glmnet(xx,yy, lambda = opt_lambda1, alpha = 0)
fit.las <- glmnet(xx,yy, lambda = opt_lambda2, alpha = 1)
## create predictions
pre.ols[test] <- predict(fit.ols, newdata=cwb[test,])
pre.aic[test] <- predict(fit.aic, newdata=cwb[test,])
pre.bic[test] <- predict(fit.bic, newdata=cwb[test,])
pre.rr[test] <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.rr))
pre.las[test] <- model.matrix(duration~., cwb[test,])%*%as.numeric(coef(fit.las))
}
## Finally, compute the mean squared prediction error:
mean((cwb$duration-pre.ols)^2)
mean((cwb$duration-pre.aic)^2)
mean((cwb$duration-pre.bic)^2)
mean((cwb$duration-pre.rr)^2)
mean((cwb$duration-pre.las)^2)
##e
set.seed(1)
cv_lasso <- cv.glmnet(xx, yy, nfolds = 5, alpha=1)
opt_lambda2 <- cv_lasso$lambda.1se
fitlas_cwb <- glmnet(xx, yy, alpha=1, lambda =opt_lambda2)
coef(fitlas_cwb)
opt_lambda2
